{"version":3,"file":"Storage.cjs.js","sources":["../lib/Storage.js"],"sourcesContent":["export class Storage {\n  constructor (options = {}) {\n    this.documents = new Set()\n    this.keys = new Map()\n\n    this.name = options.name\n    this.primary = options.primary || 'id'\n    this.handler = options.handler\n      ? Array.isArray(options.handler) ? options.handler : [options.handler]\n      : []\n    this.hasInsert = this.handler.find(h => !!h.insert)\n    this.hasUpdate = this.handler.find(h => !!h.update)\n    this.hasRemove = this.handler.find(h => !!h.remove)\n  }\n\n  async insert (documents = []) {\n    documents = Array.isArray(documents) ? documents : [documents]\n    const local = shallowCopies(documents)\n    let primaries = []\n\n    if (this.hasInsert) {\n      const options = getOptions(this)\n\n      // this runs a middleware stack on the shallow copies of the docs\n      // which might even alter the size and the signature of the docs\n      // as long as the last return value is the array with the primary keys\n      // which is also passed as third argument in order to allow\n      // throughput until the end, in case it has been created\n      // before the last handler in the stack\n      for (const handler of this.handler) {\n        if (handler.insert) {\n          primaries = await handler.insert(local, options, primaries)\n        }\n      }\n\n      if (!primaries || primaries.length !== local.length) {\n        throw new Error(`Insert return values expected to be of length (${primaries.length}), got (${local.length}) in storage ${this.name}`)\n      }\n    } else {\n      primaries = local.map(() => incrementKey())\n    }\n\n    local.forEach((doc, index) => {\n      const key = primaries[index]\n      doc[this.primary] = key\n      this.keys.set(key, doc)\n      this.documents.add(doc)\n    })\n\n    local.length = 0\n    return primaries\n  }\n\n  async update (query, modifier, options = {}) {\n    if (this.primary in modifier) {\n      throw new Error(`Unexpected primary in modifier in store ${this.name}`)\n    }\n\n    const local = shallowCopies(this.find(query, options))\n    const entries = Object.entries(modifier)\n    let updated = local.map(doc => {\n      const copy = ({ ...doc })\n\n      entries.forEach(([key, value]) => {\n        const val = typeof value === 'function'\n          ? value(copy[key])\n          : value\n        if (val === null) {\n          delete copy[key]\n        } else if (val !== undefined) {\n          copy[key] = val\n        }\n      })\n      return copy\n    })\n\n    if (this.hasUpdate) {\n      for (const handler of this.handler) {\n        if (handler.update) {\n          updated = await handler.update(local, modifier, options, updated)\n        }\n      }\n\n      if (updated.length !== local.length) {\n        throw new Error(`Update return values expected to be of length (${updated.length}), got (${local.length}) in storage ${this.name}`)\n      }\n    }\n\n    updated.forEach(doc => {\n      const key = doc[this.primary]\n      const original = this.keys.get(key)\n\n      if (!original) {\n        throw new Error(`Doc not found by primary key ${key}`)\n      }\n      this.documents.delete(original)\n      this.documents.add(doc)\n      this.keys.set(key, doc)\n    })\n\n    return updated.length\n  }\n\n  async remove (query, options = {}) {\n    const local = shallowCopies(this.find(query, options))\n    let removed = local.map(doc => doc[this.primary])\n\n    if (this.hasRemove) {\n      const options = getOptions(this)\n\n      for (const handler of this.handler) {\n        if (handler.remove) {\n          removed = await handler.remove(local, options, removed)\n        }\n      }\n      if (removed.length !== local.length) {\n        throw new Error(`Remove return values expected to be of length (${removed.length}), got (${local.length}) in storage ${this.name}`)\n      }\n    }\n\n    removed.forEach(key => {\n      const original = this.keys.get(key)\n\n      if (!original) {\n        throw new Error(`Doc not found by primary key ${key}`)\n      }\n      this.documents.delete(original)\n      this.keys.delete(key)\n    })\n\n    return removed.length\n  }\n\n  find (query, options = {}) {\n    const { limit } = options\n    const docs = this.documents.values()\n\n    if (!query) {\n      return filterDocs({ docs, limit, query: () => true })\n    }\n\n    const queryType = typeof query\n\n    if (queryType === 'string') {\n      // string query is expected to be a primary key\n      const doc = this.keys.get(query)\n      return doc ? [doc] : []\n    }\n\n    if (queryType === 'function') {\n      return filterDocs({ docs, limit, query })\n    }\n\n    if (queryType === 'object') {\n      const { looseMatching } = options\n      const entries = Object.entries(query)\n      if (entries.length === 0) {\n        return filterDocs({ docs, limit, query: () => true })\n      }\n\n      const byMatcher = doc => entries.every(([key, value]) => {\n        return looseMatching\n          ? doc[key] == value // eslint-disable-line\n          : doc[key] === value\n      })\n      return filterDocs({ docs, limit, query: byMatcher })\n    }\n\n    throw new Error(`Unsupported query type \"${queryType}\"`)\n  }\n}\n\nconst shallowCopies = docs => docs.map(doc => ({ ...doc }))\nconst getOptions = ({ primary, name }) => ({ primary, name })\nconst filterDocs = ({ docs, query, limit }) => {\n  const filtered = []\n\n  for (const doc of docs) {\n    if (query(doc)) {\n      filtered.push(doc)\n    }\n    if (limit > 0 && filtered.length >= limit) {\n      return filtered\n    }\n  }\n\n  return filtered\n}\nconst incrementKey = (() => {\n  let count = 0\n  return (length = 16) => (++count).toString(10).padStart(length, '0')\n})()\n"],"names":["Storage","options","arguments","length","undefined","_classCallCheck","documents","Set","keys","Map","name","primary","handler","Array","isArray","hasInsert","find","h","insert","hasUpdate","update","hasRemove","remove","_createClass","key","value","_insert","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this","local","primaries","_iterator","_step","_args","wrap","_callee$","_context","prev","next","shallowCopies","getOptions","_createForOfIteratorHelper","s","n","done","sent","t0","e","f","finish","Error","concat","map","incrementKey","forEach","doc","index","set","add","abrupt","stop","apply","_update","_callee2","query","modifier","_this2","entries","updated","_iterator2","_step2","_args2","_callee2$","_context2","Object","copy","_objectSpread","_ref","_ref2","_slicedToArray","val","original","get","_x","_x2","_remove","_callee3","_this3","removed","_options","_iterator3","_step3","_args3","_callee3$","_context3","_x3","limit","docs","values","filterDocs","queryType","_typeof","looseMatching","byMatcher","every","_ref3","_ref4","_ref5","_ref6","filtered","_iterator4","_step4","push","err","count","toString","padStart"],"mappings":"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"}