{"version":3,"file":"ThinStorage.cjs.js","sources":["../lib/Document.js","../lib/ThinStorage.js"],"sourcesContent":["/**\n * Holds a reference to a document in the storage.\n * The reference can be swapped using the {Document.set} method,\n * which in turn allows updating documents in the set without removing them.\n * @class\n * @internal\n */\nclass Document {\n  /**\n   * Creates a new instance. Requires a target document object.\n   * @param target {object} the document object to point to.\n   * @constructor\n   */\n  constructor (target) { this.set(target) }\n\n  /**\n   * Returns the referenced document.\n   * @method\n   * @returns {object}\n   */\n  get () { return refs.get(this) }\n\n  /**\n   * Establishes a reference (= points) to the target document object.\n   * @method\n   * @throws {TypeError} if the document is not of type 'object'\n   * @param target {object} the document object to point to\n   */\n  set (target) {\n    if (typeof target !== 'object') {\n      throw new TypeError(`Expected object, got ${target}`)\n    }\n    refs.set(this, target)\n  }\n}\n\n/**\n * Stores the actual reference to the documents.\n * Each reference is keyed by each {Document} instance.\n * @type {WeakMap<object, object>}\n * @private\n */\nconst refs = new WeakMap()\n\n/**\n * Creates a new Document instance by given document object\n * @param doc {object} the document object to reference\n * @return {Document} a Document instance\n */\nexport const createDocument = doc => new Document(doc)\n","import { createDocument } from './Document.js'\n\n/**\n * Minimal storage interface using a middleware stack.\n * Documentation: https://github.com/jankapunkt/thin-storage\n */\nexport class ThinStorage {\n  /**\n   * creates a new instance\n   * @param {object=} options\n   * @param {string} [options.set=new Set()] provide your own set, for example to make it observable with Vue refs\n   * @param {string} [options.name='storage'] name of this storage, passed to middleware\n   * @param {string} [options.primary='id'] primary key property name, passed to middleware\n   * @param {function} [options.idGen=function():string] override id generation, applies only if no middleware is used\n   * @param {object[]|object} [options.handler=[]] the middleware stack of handlers\n   */\n  constructor (options = {}) {\n    this.documents = options.set || new Set()\n    this.keys = new Map()\n    this.hooks = new Map()\n\n    this.name = options.name || 'storage'\n    this.primary = options.primary || 'id'\n    this.idGen = options.idGen || incrementKey\n    this.handler = options.handler ? toArray(options.handler) : []\n\n    this.handler.forEach(h => {\n      this.hasInsert = this.hasInsert || !!h.insert\n      this.hasUpdate = this.hasUpdate || !!h.update\n      this.hasRemove = this.hasRemove || !!h.remove\n      this.hasFetch = this.hasFetch || !!h.fetch\n    })\n  }\n\n  /**\n   * Adds a new listener function to a given event.\n   * @param name {string} name of the event\n   * @param fn {function} handler to run on emit\n   * @return {function(): *} returns a function to remove the listener\n   */\n  on (name, fn) {\n    this.hooks.get(name)?.add(fn) || this.hooks.set(name, new Set([fn]))\n    return () => this.hooks.get(name).remove(fn)\n  }\n\n  /**\n   * Clears the local documents without informing the middleware.\n   * @fires Storage#remove\n   * @fires Storage#change\n   */\n  clear () {\n    this.documents.clear()\n    const keys = [...this.keys.keys()]\n    this.keys.clear()\n\n    /**\n     * remove event.\n     *\n     * @event Storage#remove\n     * @type {object}\n     * @property {string[]} keys - the list of removed keys\n     */\n    emit(this, 'remove', { documents: keys })\n\n    /**\n     * change event.\n     *\n     * @event Storage#change\n     * @type {object}\n     * @property {string} type - the type this change is associated with\n     */\n    emit(this, 'change', { type: 'clear' })\n  }\n\n  /**\n   * Retrieves documents from a remote source through\n   * handlers. If no handlers implement the fetch method then\n   * nothing is retrieved and -1 is returned.\n   *\n   * @param query {object}\n   * @param options {object=}\n   * @fires Storage#fetch\n   * @fires Storage#change\n   * @throws {Error} if any fetched document contains no primary key\n   * @return {Promise<number>}\n   */\n  async fetch (query, options) {\n    if (!this.hasFetch) { return -1 }\n\n    let fetched = []\n    const fetchOptions = { ...options, ...getOptions(this) }\n\n    for (const handler of this.handler) {\n      if (handler.fetch) {\n        fetched = await handler.fetch(query, fetchOptions, fetched)\n      }\n    }\n\n    fetched.forEach((doc, i) => {\n      const key = doc[this.primary]\n\n      if (!key) {\n        throw new Error(`Expected fetched document at index ${i} to have primary key \"${this.primary}\"`)\n      }\n\n      if (this.keys.has(key)) {\n        const original = this.keys.get(key)\n        original.set(doc)\n      } else {\n        const wrapped = createDocument(doc)\n        this.keys.set(key, wrapped)\n        this.documents.add(wrapped)\n      }\n    })\n\n    /**\n     * fetch event.\n     *\n     * @event Storage#fetch\n     * @type {object}\n     * @property {object[]} documents - the list of fetched document objects\n     */\n    emit(this, 'fetch', { documents: fetched })\n    emit(this, 'change', { type: 'fetch' })\n    return fetched.length\n  }\n\n  /**\n   *  Inserts new documents into the storage.\n   *\n   *  If middleware does not exist, it simply inserts\n   *  the documents with a default primary key (incremented number).\n   *\n   *  Otherwise, it runs the middleware stack on the shallow copies of the docs.\n   *  Handlers might even alter the size and the signature of the docs\n   *  as long as the last return value is the array with the primary keys\n   *  which is also passed as third argument in order to allow\n   *  throughput until the end, in case it has been created\n   *  before the last handler in the stack.\n   *\n   *  There is no insert operation, if any middleware throws an error.\n   *\n   * @param {object|object[]} documents\n   * @fires Storage#insert\n   * @fires Storage#change\n   * @throws {Error} if handler returns a list of primaries with a different length of documents to be inserted\n   * @return {Promise<Array.<Object>>}\n   */\n  async insert (documents = []) {\n    documents = toArray(documents)\n    const local = copy(documents)\n    let primaries = []\n\n    if (this.hasInsert) {\n      const options = getOptions(this)\n\n      for (const handler of this.handler) {\n        if (handler.insert) {\n          primaries = await handler.insert(local, options, primaries)\n        }\n      }\n\n      if (!primaries || primaries.length !== local.length) {\n        throw new Error(`Insert return values expected to be of length (${primaries.length}), got (${local.length}) in storage ${this.name}`)\n      }\n    } else {\n      primaries.length = local.length\n\n      for (let i = 0; i < local.length; i++) {\n        primaries[i] = await this.idGen()\n      }\n    }\n    local.forEach((doc, index) => {\n      const key = primaries[index]\n      doc[this.primary] = key\n\n      const wrapped = createDocument(doc)\n      this.keys.set(key, wrapped)\n      this.documents.add(wrapped)\n    })\n\n    /**\n     * insert event.\n     *\n     * @event Storage#insert\n     * @type {object}\n     * @property {object[]} documents - the list of inserted document objects\n     */\n    emit(this, 'insert', { documents: local })\n    emit(this, 'change', { type: 'insert' })\n    return primaries\n  }\n\n  /**\n   * Updates documents by a given query and modifier.\n   * If no middleware exists then the update is applied immediately.\n   * Otherwise, it runs through all functions in the middleware stack\n   * and awaits the updated array as result.\n   *\n   * The updated array must be the same length as the documents selected.\n   * Note: middleware can alter or filter the documents.\n   *\n   * If a middleware throws an error then there will be no update at all.\n   *\n   * @param {object} query\n   * @param {object} [options={}]\n   * @param {boolean} [options.strict=] optional strict mode used to check for equal length queried and updated docs\n   * @param {boolean} [options.strict=false]\n   * @return {Promise<*>}\n   */\n  async update (query, modifier = {}, options = {}) {\n    const local = copy(this.find(query, options))\n    const entries = Object.entries(modifier)\n    let updated = local.map(doc => {\n      const copy = ({ ...doc })\n\n      entries.forEach(([key, value]) => {\n        const val = typeof value === 'function'\n          ? value(copy[key])\n          : value\n        if (val === null) {\n          delete copy[key]\n        } else if (val !== undefined) {\n          copy[key] = val\n        }\n      })\n      return copy\n    })\n\n    if (this.hasUpdate) {\n      const updateOptions = { ...options, ...getOptions(this) }\n      for (const handler of this.handler) {\n        if (handler.update) {\n          updated = await handler.update(local, modifier, updateOptions, updated)\n        }\n      }\n\n      if (options.strict && updated.length !== local.length) {\n        throw new Error(`Update return values expected to be of length (${local.length}), got (${updated.length}) in storage ${this.name}`)\n      }\n    }\n\n    updated.forEach(doc => {\n      const key = doc[this.primary]\n      const wrapped = this.keys.get(key)\n\n      if (!wrapped) {\n        throw new Error(`Doc not found by primary key ${key} in storage ${this.name}`)\n      }\n\n      wrapped.set(doc)\n    })\n\n    emit(this, 'update', { documents: updated })\n    emit(this, 'change', { type: 'update' })\n    return updated.length\n  }\n\n  /**\n   * Removes documents from the storage by given query.\n   * If a middleware with remove implementation does not exist then the change is applied immediately.\n   * @param query {object|string|string[]|function}\n   * @param {object} [options={}]\n   * @param {boolean} [options.strict=] optional strict mode used to check for equal length queried and removed docs\n   * @return {Promise<number>} the number of removed documents\n   */\n  async remove (query, options = {}) {\n    const local = copy(this.find(query, options))\n    let removed = local.map(doc => doc[this.primary])\n\n    if (this.hasRemove) {\n      const removeOptions = { ...options, ...getOptions(this) }\n\n      for (const handler of this.handler) {\n        if (handler.remove) {\n          removed = await handler.remove(local, removeOptions, removed)\n        }\n      }\n      if (options.strict && removed.length !== local.length) {\n        throw new Error(`Remove return values expected to be of length (${local.length}), got (${removed.length}) in storage ${this.name}`)\n      }\n    }\n\n    removed.forEach(key => {\n      const original = this.keys.get(key)\n\n      if (!original) {\n        throw new Error(`Doc not found by primary key ${key} in storage ${this.name}`)\n      }\n\n      this.documents.delete(original)\n      this.keys.delete(key)\n    })\n\n    emit(this, 'remove', { documents: removed })\n    emit(this, 'change', { type: 'remove' })\n    return removed.length\n  }\n\n  /**\n   * Select documents from the set by a given selector pattern (query).\n   * @param {object|object[]|string|string[]|function|undefined} query\n   * @param {object} [options={}]\n   * @param {boolean} [options.loose=] use to check loosely (==) instead of strict (===)\n   * @param {number} [options.limit=] limits the amount of documents to add to the result\n   * @returns {object[]}\n   */\n  find (query, options = {}) {\n    const { limit, loose } = options\n    const docs = this.documents\n\n    if (typeof query === 'undefined' || query === null) {\n      return filterDocs({ docs, limit, query: () => true })\n    }\n\n    const isArray = Array.isArray(query)\n    const queryType = typeof query\n\n    if (queryType === 'string') {\n      // string query is expected to be a primary key\n      const doc = this.keys.get(query)\n      return doc ? [doc.get()] : []\n    }\n\n    if (queryType === 'function') {\n      return filterDocs({ docs, limit, query })\n    }\n\n    if (queryType === 'object' && !isArray) {\n      const entries = Object.entries(query)\n      if (entries.length === 0) {\n        return filterDocs({ docs, limit, query: () => true })\n      }\n\n      const byMatcher = doc => entries.every(([key, value]) =>\n        toArray(value)\n          .some(val => loose\n            ? doc[key] == val // eslint-disable-line\n            : doc[key] === val))\n      return filterDocs({ docs, limit, query: byMatcher })\n    }\n\n    if (isArray) {\n      const subs = new Set()\n      const add = doc => limit > 0 && subs.size >= limit ? undefined : subs.add(doc)\n      for (const q of query) {\n        // beware this is a recursion, we hope you know what you are doing\n        this.find(q, { loose }).forEach(add)\n      }\n      return [...subs]\n    }\n\n    throw new Error(`Unsupported query type \"${queryType}\"`)\n  }\n}\n\n/***********\n * private *\n ***********/\n\n/**\n * Creates shallow copies of a list of given docs\n * @private\n * @param docs\n * @return {*}\n */\nconst copy = docs => docs.map(doc => ({ ...doc }))\n\n/**\n * Emitter function; extracted, so it can't be invoked from external.\n * @private\n * @param self\n * @param name\n * @param options\n * @return {*|number}\n */\nconst emit = (self, name, options) => {\n  const hooks = self.hooks.get(name)\n  return hooks && setTimeout(() => hooks.forEach(hook => hook(options)), 0)\n}\n/**\n * Extracts relevant properties to create options object\n * @private\n * @param primary\n * @param name\n * @return {{name, primary}}\n */\nconst getOptions = ({ primary, name }) => ({ primary, name })\n\n/**\n * Applies query to each document and adds the document to the list,\n * if conditions apply and (optional) limit is not reached.\n * @private\n * @param docs\n * @param query\n * @param limit\n * @return {object[]}\n */\nconst filterDocs = ({ docs, query, limit }) => {\n  const filtered = []\n\n  for (const wrapped of docs) {\n    const doc = wrapped.get()\n\n    if (query(doc)) {\n      filtered.push(doc)\n    }\n\n    if (limit > 0 && filtered.length >= limit) {\n      return filtered\n    }\n  }\n\n  return filtered\n}\n/**\n * Transform any incoming argument to an array.\n * @private\n * @param x {*}\n * @return {Array.<*>}\n */\nconst toArray = x => typeof x === 'undefined' ? [] : Array.isArray(x) ? x : [x]\nconst incrementKey = ((count) =>\n  (length = 16) => (++count).toString(10).padStart(length, '0'))(0)\n"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","r","l","t","Symbol","iterator","e","n","u","a","f","o","call","next","Object","done","push","value","length","Array","isArray","_regeneratorRuntime","Document","target","_classCallCheck","set","_createClass","key","get","refs","_typeof","concat","WeakMap","createDocument","doc","ThinStorage","_this","options","arguments","undefined","documents","Set","keys","Map","hooks","name","primary","idGen","incrementKey","handler","toArray","forEach","h","hasInsert","insert","hasUpdate","update","hasRemove","remove","hasFetch","fetch","on","fn","_this$hooks$get","_this2","add","clear","_toConsumableArray","emit","type","_fetch","_asyncToGenerator","mark","_callee","query","_this3","fetched","fetchOptions","_iterator","_step","wrap","_callee$","_context","prev","abrupt","_objectSpread","getOptions","_createForOfIteratorHelper","s","sent","t0","finish","Error","has","original","wrapped","stop","_x","_x2","apply","_insert","_callee2","_this4","local","primaries","_iterator2","_step2","_args2","_callee2$","_context2","copy","index","_update","_callee3","_this5","modifier","entries","updated","updateOptions","_iterator3","_step3","_args3","_callee3$","_context3","find","map","_ref","_ref2","val","strict","_x3","_remove","_callee4","_this6","removed","removeOptions","_iterator4","_step4","_args4","_callee4$","_context4","_x4","limit","loose","docs","filterDocs","queryType","byMatcher","every","_ref3","_ref4","some","subs","size","_iterator5","_step5","q","err","self","setTimeout","hook","_ref5","_ref6","filtered","_iterator6","_step6","x","count","toString","padStart"],"mappings":"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"}