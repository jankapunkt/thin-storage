{"version":3,"file":"ThinStorage.es5.js","sources":["../lib/Document.js","../lib/ThinStorage.js"],"sourcesContent":["/**\n * Holds a reference to a document in the storage.\n * The reference can be swapped using the {Document.set} method,\n * which in turn allows updating documents in the set without removing them.\n * @class\n * @internal\n */\nclass Document {\n  /**\n   * Creates a new instance. Requires a target document object.\n   * @param target {object} the document object to point to.\n   * @constructor\n   */\n  constructor (target) { this.set(target) }\n\n  /**\n   * Returns the referenced document.\n   * @method\n   * @returns {object}\n   */\n  get () { return refs.get(this) }\n\n  /**\n   * Establishes a reference (= points) to the target document object.\n   * @method\n   * @throws {TypeError} if the document is not of type 'object'\n   * @param target {object} the document object to point to\n   */\n  set (target) {\n    if (typeof target !== 'object') {\n      throw new TypeError(`Expected object, got ${target}`)\n    }\n    refs.set(this, target)\n  }\n}\n\n/**\n * Stores the actual reference to the documents.\n * Each reference is keyed by each {Document} instance.\n * @type {WeakMap<object, object>}\n * @private\n */\nconst refs = new WeakMap()\n\n/**\n * Creates a new Document instance by given document object\n * @param doc {object} the document object to reference\n * @return {Document} a Document instance\n */\nexport const createDocument = doc => new Document(doc)\n","import { createDocument } from './Document.js'\n\n/**\n * Minimal storage interface using a middleware stack.\n * Documentation: https://github.com/jankapunkt/thin-storage\n */\nexport class ThinStorage {\n  /**\n   * creates a new instance\n   * @param {object=} options\n   * @param {string} [options.set=new Set()] provide your own set, for example to make it observable with Vue refs\n   * @param {string} [options.name='storage'] name of this storage, passed to middleware\n   * @param {string} [options.primary='id'] primary key property name, passed to middleware\n   * @param {function} [options.idGen=function():string] override id generation, applies only if no middleware is used\n   * @param {object[]|object} [options.handler=[]] the middleware stack of handlers\n   */\n  constructor (options = {}) {\n    this.documents = options.set || new Set()\n    this.keys = new Map()\n    this.hooks = new Map()\n\n    this.name = options.name || 'storage'\n    this.primary = options.primary || 'id'\n    this.idGen = options.idGen || incrementKey\n    this.handler = options.handler ? toArray(options.handler) : []\n\n    this.handler.forEach(h => {\n      this.hasInsert = this.hasInsert || !!h.insert\n      this.hasUpdate = this.hasUpdate || !!h.update\n      this.hasRemove = this.hasRemove || !!h.remove\n      this.hasFetch = this.hasFetch || !!h.fetch\n    })\n  }\n\n  /**\n   * Adds a new listener function to a given event.\n   * @param name {string} name of the event\n   * @param fn {function} handler to run on emit\n   * @return {function(): *} returns a function to remove the listener\n   */\n  on (name, fn) {\n    this.hooks.get(name)?.add(fn) || this.hooks.set(name, new Set([fn]))\n    return () => this.hooks.get(name).remove(fn)\n  }\n\n  /**\n   * Clears the local documents without informing the middleware.\n   * @fires Storage#remove\n   * @fires Storage#change\n   */\n  clear () {\n    this.documents.clear()\n    const keys = [...this.keys.keys()]\n    this.keys.clear()\n\n    /**\n     * remove event.\n     *\n     * @event Storage#remove\n     * @type {object}\n     * @property {string[]} keys - the list of removed keys\n     */\n    emit(this, 'remove', { documents: keys })\n\n    /**\n     * change event.\n     *\n     * @event Storage#change\n     * @type {object}\n     * @property {string} type - the type this change is associated with\n     */\n    emit(this, 'change', { type: 'clear' })\n  }\n\n  /**\n   * Retrieves documents from a remote source through\n   * handlers. If no handlers implement the fetch method then\n   * nothing is retrieved and -1 is returned.\n   *\n   * @param query {object}\n   * @param options {object=}\n   * @fires Storage#fetch\n   * @fires Storage#change\n   * @throws {Error} if any fetched document contains no primary key\n   * @return {Promise<number>}\n   */\n  async fetch (query, options) {\n    if (!this.hasFetch) { return -1 }\n\n    let fetched = []\n    const fetchOptions = { ...options, ...getOptions(this) }\n\n    for (const handler of this.handler) {\n      if (handler.fetch) {\n        fetched = await handler.fetch(query, fetchOptions, fetched)\n      }\n    }\n\n    fetched.forEach((doc, i) => {\n      const key = doc[this.primary]\n\n      if (!key) {\n        throw new Error(`Expected fetched document at index ${i} to have primary key \"${this.primary}\"`)\n      }\n\n      if (this.keys.has(key)) {\n        const original = this.keys.get(key)\n        original.set(doc)\n      } else {\n        const wrapped = createDocument(doc)\n        this.keys.set(key, wrapped)\n        this.documents.add(wrapped)\n      }\n    })\n\n    /**\n     * fetch event.\n     *\n     * @event Storage#fetch\n     * @type {object}\n     * @property {object[]} documents - the list of fetched document objects\n     */\n    emit(this, 'fetch', { documents: fetched })\n    emit(this, 'change', { type: 'fetch' })\n    return fetched.length\n  }\n\n  /**\n   *  Inserts new documents into the storage.\n   *\n   *  If middleware does not exist, it simply inserts\n   *  the documents with a default primary key (incremented number).\n   *\n   *  Otherwise, it runs the middleware stack on the shallow copies of the docs.\n   *  Handlers might even alter the size and the signature of the docs\n   *  as long as the last return value is the array with the primary keys\n   *  which is also passed as third argument in order to allow\n   *  throughput until the end, in case it has been created\n   *  before the last handler in the stack.\n   *\n   *  There is no insert operation, if any middleware throws an error.\n   *\n   * @param {object|object[]} documents\n   * @fires Storage#insert\n   * @fires Storage#change\n   * @throws {Error} if handler returns a list of primaries with a different length of documents to be inserted\n   * @return {Promise<Array.<Object>>}\n   */\n  async insert (documents = []) {\n    documents = toArray(documents)\n    const local = copy(documents)\n    let primaries = []\n\n    if (this.hasInsert) {\n      const options = getOptions(this)\n\n      for (const handler of this.handler) {\n        if (handler.insert) {\n          primaries = await handler.insert(local, options, primaries)\n        }\n      }\n\n      if (!primaries || primaries.length !== local.length) {\n        throw new Error(`Insert return values expected to be of length (${primaries.length}), got (${local.length}) in storage ${this.name}`)\n      }\n    } else {\n      primaries.length = local.length\n\n      for (let i = 0; i < local.length; i++) {\n        primaries[i] = await this.idGen()\n      }\n    }\n    local.forEach((doc, index) => {\n      const key = primaries[index]\n      doc[this.primary] = key\n\n      const wrapped = createDocument(doc)\n      this.keys.set(key, wrapped)\n      this.documents.add(wrapped)\n    })\n\n    /**\n     * insert event.\n     *\n     * @event Storage#insert\n     * @type {object}\n     * @property {object[]} documents - the list of inserted document objects\n     */\n    emit(this, 'insert', { documents: local })\n    emit(this, 'change', { type: 'insert' })\n    return primaries\n  }\n\n  /**\n   * Updates documents by a given query and modifier.\n   * If no middleware exists then the update is applied immediately.\n   * Otherwise, it runs through all functions in the middleware stack\n   * and awaits the updated array as result.\n   *\n   * The updated array must be the same length as the documents selected.\n   * Note: middleware can alter or filter the documents.\n   *\n   * If a middleware throws an error then there will be no update at all.\n   *\n   * @param {object} query\n   * @param {object} [options={}]\n   * @param {boolean} [options.strict=] optional strict mode used to check for equal length queried and updated docs\n   * @param {boolean} [options.strict=false]\n   * @return {Promise<*>}\n   */\n  async update (query, modifier = {}, options = {}) {\n    const local = copy(this.find(query, options))\n    const entries = Object.entries(modifier)\n    let updated = local.map(doc => {\n      const copy = ({ ...doc })\n\n      entries.forEach(([key, value]) => {\n        const val = typeof value === 'function'\n          ? value(copy[key])\n          : value\n        if (val === null) {\n          delete copy[key]\n        } else if (val !== undefined) {\n          copy[key] = val\n        }\n      })\n      return copy\n    })\n\n    if (this.hasUpdate) {\n      const updateOptions = { ...options, ...getOptions(this) }\n      for (const handler of this.handler) {\n        if (handler.update) {\n          updated = await handler.update(local, modifier, updateOptions, updated)\n        }\n      }\n\n      if (options.strict && updated.length !== local.length) {\n        throw new Error(`Update return values expected to be of length (${local.length}), got (${updated.length}) in storage ${this.name}`)\n      }\n    }\n\n    updated.forEach(doc => {\n      const key = doc[this.primary]\n      const wrapped = this.keys.get(key)\n\n      if (!wrapped) {\n        throw new Error(`Doc not found by primary key ${key} in storage ${this.name}`)\n      }\n\n      wrapped.set(doc)\n    })\n\n    emit(this, 'update', { documents: updated })\n    emit(this, 'change', { type: 'update' })\n    return updated.length\n  }\n\n  /**\n   * Removes documents from the storage by given query.\n   * If a middleware with remove implementation does not exist then the change is applied immediately.\n   * @param query {object|string|string[]|function}\n   * @param {object} [options={}]\n   * @param {boolean} [options.strict=] optional strict mode used to check for equal length queried and removed docs\n   * @return {Promise<number>} the number of removed documents\n   */\n  async remove (query, options = {}) {\n    const local = copy(this.find(query, options))\n    let removed = local.map(doc => doc[this.primary])\n\n    if (this.hasRemove) {\n      const removeOptions = { ...options, ...getOptions(this) }\n\n      for (const handler of this.handler) {\n        if (handler.remove) {\n          removed = await handler.remove(local, removeOptions, removed)\n        }\n      }\n      if (options.strict && removed.length !== local.length) {\n        throw new Error(`Remove return values expected to be of length (${local.length}), got (${removed.length}) in storage ${this.name}`)\n      }\n    }\n\n    removed.forEach(key => {\n      const original = this.keys.get(key)\n\n      if (!original) {\n        throw new Error(`Doc not found by primary key ${key} in storage ${this.name}`)\n      }\n\n      this.documents.delete(original)\n      this.keys.delete(key)\n    })\n\n    emit(this, 'remove', { documents: removed })\n    emit(this, 'change', { type: 'remove' })\n    return removed.length\n  }\n\n  /**\n   * Select documents from the set by a given selector pattern (query).\n   * @param {object|object[]|string|string[]|function|undefined} query\n   * @param {object} [options={}]\n   * @param {boolean} [options.loose=] use to check loosely (==) instead of strict (===)\n   * @param {number} [options.limit=] limits the amount of documents to add to the result\n   * @returns {object[]}\n   */\n  find (query, options = {}) {\n    const { limit, loose } = options\n    const docs = this.documents\n\n    if (typeof query === 'undefined' || query === null) {\n      return filterDocs({ docs, limit, query: () => true })\n    }\n\n    const isArray = Array.isArray(query)\n    const queryType = typeof query\n\n    if (queryType === 'string') {\n      // string query is expected to be a primary key\n      const doc = this.keys.get(query)\n      return doc ? [doc.get()] : []\n    }\n\n    if (queryType === 'function') {\n      return filterDocs({ docs, limit, query })\n    }\n\n    if (queryType === 'object' && !isArray) {\n      const entries = Object.entries(query)\n      if (entries.length === 0) {\n        return filterDocs({ docs, limit, query: () => true })\n      }\n\n      const byMatcher = doc => entries.every(([key, value]) =>\n        toArray(value)\n          .some(val => loose\n            ? doc[key] == val // eslint-disable-line\n            : doc[key] === val))\n      return filterDocs({ docs, limit, query: byMatcher })\n    }\n\n    if (isArray) {\n      const subs = new Set()\n      const add = doc => limit > 0 && subs.size >= limit ? undefined : subs.add(doc)\n      for (const q of query) {\n        // beware this is a recursion, we hope you know what you are doing\n        this.find(q, { loose }).forEach(add)\n      }\n      return [...subs]\n    }\n\n    throw new Error(`Unsupported query type \"${queryType}\"`)\n  }\n}\n\n/***********\n * private *\n ***********/\n\n/**\n * Creates shallow copies of a list of given docs\n * @private\n * @param docs\n * @return {*}\n */\nconst copy = docs => docs.map(doc => ({ ...doc }))\n\n/**\n * Emitter function; extracted, so it can't be invoked from external.\n * @private\n * @param self\n * @param name\n * @param options\n * @return {*|number}\n */\nconst emit = (self, name, options) => {\n  const hooks = self.hooks.get(name)\n  return hooks && setTimeout(() => hooks.forEach(hook => hook(options)), 0)\n}\n/**\n * Extracts relevant properties to create options object\n * @private\n * @param primary\n * @param name\n * @return {{name, primary}}\n */\nconst getOptions = ({ primary, name }) => ({ primary, name })\n\n/**\n * Applies query to each document and adds the document to the list,\n * if conditions apply and (optional) limit is not reached.\n * @private\n * @param docs\n * @param query\n * @param limit\n * @return {object[]}\n */\nconst filterDocs = ({ docs, query, limit }) => {\n  const filtered = []\n\n  for (const wrapped of docs) {\n    const doc = wrapped.get()\n\n    if (query(doc)) {\n      filtered.push(doc)\n    }\n\n    if (limit > 0 && filtered.length >= limit) {\n      return filtered\n    }\n  }\n\n  return filtered\n}\n/**\n * Transform any incoming argument to an array.\n * @private\n * @param x {*}\n * @return {Array.<*>}\n */\nconst toArray = x => typeof x === 'undefined' ? [] : Array.isArray(x) ? x : [x]\nconst incrementKey = ((count) =>\n  (length = 16) => (++count).toString(10).padStart(length, '0'))(0)\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","_createForOfIteratorHelper","allowArrayLike","it","Array","isArray","_unsupportedIterableToArray","F","_e","normalCompletion","didErr","err","step","_e2","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","apply","_objectSpread","arguments","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","key","_toPropertyKey","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","self","args","undefined","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","toString","from","test","iter","len","arr2","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","_createClass","protoProps","staticProps","_toPrimitive","String","input","hint","prim","toPrimitive","res","Number","Document","set","get","refs","concat","WeakMap","createDocument","doc","ThinStorage","_this","options","documents","Set","Map","hooks","primary","idGen","incrementKey","handler","toArray","hasInsert","insert","hasUpdate","update","hasRemove","remove","hasFetch","fetch","on","_this$hooks$get","_this2","add","clear","emit","_fetch","_callee","query","_this3","fetched","fetchOptions","_iterator","_step","_callee$","_context","getOptions","t0","has","original","wrapped","_x","_x2","_insert","_callee2","_this4","local","primaries","_iterator2","_step2","_args2","_callee2$","_context2","copy","index","_update","_callee3","_this5","modifier","entries","updated","updateOptions","_iterator3","_step3","_args3","_callee3$","_context3","find","map","_ref","_ref2","_slicedToArray","val","strict","_x3","_remove","_callee4","_this6","removed","removeOptions","_iterator4","_step4","_args4","_callee4$","_context4","_x4","limit","loose","docs","filterDocs","queryType","byMatcher","every","_ref3","_ref4","some","subs","size","_iterator5","_step5","q","setTimeout","hook","_ref5","_ref6","filtered","_iterator6","_step6","x","count","padStart"],"mappings":"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"}