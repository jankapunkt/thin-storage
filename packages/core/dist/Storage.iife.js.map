{"version":3,"file":"Storage.iife.js","sources":["../lib/Storage.js"],"sourcesContent":["export class Storage {\n  constructor (options = {}) {\n    this.documents = new Set()\n    this.keys = new Map()\n\n    this.name = options.name\n    this.primary = options.primary || 'id'\n    this.handler = options.handler\n      ? Array.isArray(options.handler) ? options.handler : [options.handler]\n      : []\n    this.hasInsert = this.handler.find(h => !!h.insert)\n    this.hasUpdate = this.handler.find(h => !!h.update)\n    this.hasRemove = this.handler.find(h => !!h.remove)\n  }\n\n  async insert (documents = []) {\n    documents = Array.isArray(documents) ? documents : [documents]\n    const local = shallowCopies(documents)\n    let primaries = []\n\n    if (this.hasInsert) {\n      const options = getOptions(this)\n\n      // this runs a middleware stack on the shallow copies of the docs\n      // which might even alter the size and the signature of the docs\n      // as long as the last return value is the array with the primary keys\n      // which is also passed as third argument in order to allow\n      // throughput until the end, in case it has been created\n      // before the last handler in the stack\n      for (const handler of this.handler) {\n        if (handler.insert) {\n          primaries = await handler.insert(local, options, primaries)\n        }\n      }\n\n      if (!primaries || primaries.length !== local.length) {\n        throw new Error(`Insert return values expected to be of length (${primaries.length}), got (${local.length}) in storage ${this.name}`)\n      }\n    } else {\n      primaries = local.map(() => incrementKey())\n    }\n\n    local.forEach((doc, index) => {\n      const key = primaries[index]\n      doc[this.primary] = key\n      this.keys.set(key, doc)\n      this.documents.add(doc)\n    })\n\n    local.length = 0\n    return primaries\n  }\n\n  async update (query, modifier, options = {}) {\n    if (this.primary in modifier) {\n      throw new Error(`Unexpected primary in modifier in store ${this.name}`)\n    }\n\n    const local = shallowCopies(this.find(query, options))\n    const entries = Object.entries(modifier)\n    let updated = local.map(doc => {\n      const copy = ({ ...doc })\n\n      entries.forEach(([key, value]) => {\n        const val = typeof value === 'function'\n          ? value(copy[key])\n          : value\n        if (val === null) {\n          delete copy[key]\n        } else if (val !== undefined) {\n          copy[key] = val\n        }\n      })\n      return copy\n    })\n\n    if (this.hasUpdate) {\n      for (const handler of this.handler) {\n        if (handler.update) {\n          updated = await handler.update(local, modifier, options, updated)\n        }\n      }\n\n      if (updated.length !== local.length) {\n        throw new Error(`Update return values expected to be of length (${updated.length}), got (${local.length}) in storage ${this.name}`)\n      }\n    }\n\n    updated.forEach(doc => {\n      const key = doc[this.primary]\n      const original = this.keys.get(key)\n\n      if (!original) {\n        throw new Error(`Doc not found by primary key ${key}`)\n      }\n      this.documents.delete(original)\n      this.documents.add(doc)\n      this.keys.set(key, doc)\n    })\n\n    return updated.length\n  }\n\n  async remove (query, options = {}) {\n    const local = shallowCopies(this.find(query, options))\n    let removed = local.map(doc => doc[this.primary])\n\n    if (this.hasRemove) {\n      const options = getOptions(this)\n\n      for (const handler of this.handler) {\n        if (handler.remove) {\n          removed = await handler.remove(local, options, removed)\n        }\n      }\n      if (removed.length !== local.length) {\n        throw new Error(`Remove return values expected to be of length (${removed.length}), got (${local.length}) in storage ${this.name}`)\n      }\n    }\n\n    removed.forEach(key => {\n      const original = this.keys.get(key)\n\n      if (!original) {\n        throw new Error(`Doc not found by primary key ${key}`)\n      }\n      this.documents.delete(original)\n      this.keys.delete(key)\n    })\n\n    return removed.length\n  }\n\n  find (query, options = {}) {\n    const { limit } = options\n    const docs = this.documents.values()\n\n    if (!query) {\n      return filterDocs({ docs, limit, query: () => true })\n    }\n\n    const queryType = typeof query\n\n    if (queryType === 'string') {\n      // string query is expected to be a primary key\n      const doc = this.keys.get(query)\n      return doc ? [doc] : []\n    }\n\n    if (queryType === 'function') {\n      return filterDocs({ docs, limit, query })\n    }\n\n    if (queryType === 'object') {\n      const { looseMatching } = options\n      const entries = Object.entries(query)\n      if (entries.length === 0) {\n        return filterDocs({ docs, limit, query: () => true })\n      }\n\n      const byMatcher = doc => entries.every(([key, value]) => {\n        return looseMatching\n          ? doc[key] == value // eslint-disable-line\n          : doc[key] === value\n      })\n      return filterDocs({ docs, limit, query: byMatcher })\n    }\n\n    throw new Error(`Unsupported query type \"${queryType}\"`)\n  }\n}\n\nconst shallowCopies = docs => docs.map(doc => ({ ...doc }))\nconst getOptions = ({ primary, name }) => ({ primary, name })\nconst filterDocs = ({ docs, query, limit }) => {\n  const filtered = []\n\n  for (const doc of docs) {\n    if (query(doc)) {\n      filtered.push(doc)\n    }\n    if (limit > 0 && filtered.length >= limit) {\n      return filtered\n    }\n  }\n\n  return filtered\n}\nconst incrementKey = (() => {\n  let count = 0\n  return (length = 16) => (++count).toString(10).padStart(length, '0')\n})()\n"],"names":["Storage","options","arguments","length","undefined","_classCallCheck","documents","Set","keys","Map","name","primary","handler","Array","isArray","hasInsert","find","h","insert","hasUpdate","update","hasRemove","remove","_createClass","key","value","_insert","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this","local","primaries","_iterator","_step","_args","wrap","_callee$","_context","prev","next","shallowCopies","getOptions","_createForOfIteratorHelper","s","n","done","sent","t0","e","f","finish","Error","concat","map","incrementKey","forEach","doc","index","set","add","abrupt","stop","apply","_update","_callee2","query","modifier","_this2","entries","updated","_iterator2","_step2","_args2","_callee2$","_context2","Object","copy","_objectSpread","_ref","_ref2","_slicedToArray","val","original","get","_x","_x2","_remove","_callee3","_this3","removed","_options","_iterator3","_step3","_args3","_callee3$","_context3","_x3","limit","docs","values","filterDocs","queryType","_typeof","looseMatching","byMatcher","every","_ref3","_ref4","_ref5","_ref6","filtered","_iterator4","_step4","push","err","count","toString","padStart"],"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"}