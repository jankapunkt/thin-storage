{"version":3,"file":"ThinStorage.iife.js","sources":["../lib/Document.js","../lib/ThinStorage.js"],"sourcesContent":["/**\n * Holds a reference to a document in the storage.\n * The reference can be swapped using the {Document.set} method,\n * which in turn allows updating documents in the set without removing them.\n * @class\n * @internal\n */\nclass Document {\n  /**\n   * Creates a new instance. Requires a target document object.\n   * @param target {object} the document object to point to.\n   * @constructor\n   */\n  constructor (target) { this.set(target) }\n\n  /**\n   * Returns the referenced document.\n   * @method\n   * @returns {object}\n   */\n  get () { return refs.get(this) }\n\n  /**\n   * Establishes a reference (= points) to the target document object.\n   * @method\n   * @throws {TypeError} if the document is not of type 'object'\n   * @param target {object} the document object to point to\n   */\n  set (target) {\n    if (typeof target !== 'object') {\n      throw new TypeError(`Expected object, got ${target}`)\n    }\n    refs.set(this, target)\n  }\n}\n\n/**\n * Stores the actual reference to the documents.\n * Each reference is keyed by each {Document} instance.\n * @type {WeakMap<object, object>}\n * @private\n */\nconst refs = new WeakMap()\n\n/**\n * Creates a new Document instance by given document object\n * @param doc {object} the document object to reference\n * @return {Document} a Document instance\n */\nexport const createDocument = doc => new Document(doc)\n","import { createDocument } from './Document.js'\n\n/**\n * Minimal storage interface using a middleware stack.\n * Documentation: https://github.com/jankapunkt/thin-storage\n */\nexport class ThinStorage {\n  /**\n   * creates a new instance\n   * @param {object=} options\n   * @param {string} [options.set=new Set()] provide your own set, for example to make it observable with Vue refs\n   * @param {string} [options.name='storage'] name of this storage, passed to middleware\n   * @param {string} [options.primary='id'] primary key property name, passed to middleware\n   * @param {function} [options.idGen=function():string] override id generation, applies only if no middleware is used\n   * @param {object[]|object} [options.handler=[]] the middleware stack of handlers\n   */\n  constructor (options = {}) {\n    this.documents = options.set || new Set()\n    this.keys = new Map()\n    this.hooks = new Map()\n\n    this.name = options.name || 'storage'\n    this.primary = options.primary || 'id'\n    this.idGen = options.idGen || incrementKey\n    this.handler = options.handler ? toArray(options.handler) : []\n\n    this.handler.forEach(h => {\n      this.hasInsert = this.hasInsert || !!h.insert\n      this.hasUpdate = this.hasUpdate || !!h.update\n      this.hasRemove = this.hasRemove || !!h.remove\n      this.hasFetch = this.hasFetch || !!h.fetch\n    })\n  }\n\n  /**\n   * Adds a new listener function to a given event.\n   * @param name {string} name of the event\n   * @param fn {function} handler to run on emit\n   * @return {function(): *} returns a function to remove the listener\n   */\n  on (name, fn) {\n    this.hooks.get(name)?.add(fn) || this.hooks.set(name, new Set([fn]))\n    return () => this.hooks.get(name).remove(fn)\n  }\n\n  /**\n   * Clears the local documents without informing the middleware.\n   * @fires Storage#remove\n   * @fires Storage#change\n   */\n  clear () {\n    this.documents.clear()\n    const keys = [...this.keys.keys()]\n    this.keys.clear()\n\n    /**\n     * remove event.\n     *\n     * @event Storage#remove\n     * @type {object}\n     * @property {string[]} keys - the list of removed keys\n     */\n    emit(this, 'remove', { documents: keys })\n\n    /**\n     * change event.\n     *\n     * @event Storage#change\n     * @type {object}\n     * @property {string} type - the type this change is associated with\n     */\n    emit(this, 'change', { type: 'clear' })\n  }\n\n  /**\n   * Retrieves documents from a remote source through\n   * handlers. If no handlers implement the fetch method then\n   * nothing is retrieved and -1 is returned.\n   *\n   * @param query {object}\n   * @param options {object=}\n   * @fires Storage#fetch\n   * @fires Storage#change\n   * @throws {Error} if any fetched document contains no primary key\n   * @return {Promise<number>}\n   */\n  async fetch (query, options) {\n    if (!this.hasFetch) { return -1 }\n\n    let fetched = []\n    const fetchOptions = { ...options, ...getOptions(this) }\n\n    for (const handler of this.handler) {\n      if (handler.fetch) {\n        fetched = await handler.fetch(query, fetchOptions, fetched)\n      }\n    }\n\n    fetched.forEach((doc, i) => {\n      const key = doc[this.primary]\n\n      if (!key) {\n        throw new Error(`Expected fetched document at index ${i} to have primary key \"${this.primary}\"`)\n      }\n\n      if (this.keys.has(key)) {\n        const original = this.keys.get(key)\n        original.set(doc)\n      } else {\n        const wrapped = createDocument(doc)\n        this.keys.set(key, wrapped)\n        this.documents.add(wrapped)\n      }\n    })\n\n    /**\n     * fetch event.\n     *\n     * @event Storage#fetch\n     * @type {object}\n     * @property {object[]} documents - the list of fetched document objects\n     */\n    emit(this, 'fetch', { documents: fetched })\n    emit(this, 'change', { type: 'fetch' })\n    return fetched.length\n  }\n\n  /**\n   *  Inserts new documents into the storage.\n   *\n   *  If middleware does not exist, it simply inserts\n   *  the documents with a default primary key (incremented number).\n   *\n   *  Otherwise, it runs the middleware stack on the shallow copies of the docs.\n   *  Handlers might even alter the size and the signature of the docs\n   *  as long as the last return value is the array with the primary keys\n   *  which is also passed as third argument in order to allow\n   *  throughput until the end, in case it has been created\n   *  before the last handler in the stack.\n   *\n   *  There is no insert operation, if any middleware throws an error.\n   *\n   * @param {object|object[]} documents\n   * @fires Storage#insert\n   * @fires Storage#change\n   * @throws {Error} if handler returns a list of primaries with a different length of documents to be inserted\n   * @return {Promise<Array.<Object>>}\n   */\n  async insert (documents = []) {\n    documents = toArray(documents)\n    const local = copy(documents)\n    let primaries = []\n\n    if (this.hasInsert) {\n      const options = getOptions(this)\n\n      for (const handler of this.handler) {\n        if (handler.insert) {\n          primaries = await handler.insert(local, options, primaries)\n        }\n      }\n\n      if (!primaries || primaries.length !== local.length) {\n        throw new Error(`Insert return values expected to be of length (${primaries.length}), got (${local.length}) in storage ${this.name}`)\n      }\n    } else {\n      primaries.length = local.length\n\n      for (let i = 0; i < local.length; i++) {\n        primaries[i] = await this.idGen()\n      }\n    }\n    local.forEach((doc, index) => {\n      const key = primaries[index]\n      doc[this.primary] = key\n\n      const wrapped = createDocument(doc)\n      this.keys.set(key, wrapped)\n      this.documents.add(wrapped)\n    })\n\n    /**\n     * insert event.\n     *\n     * @event Storage#insert\n     * @type {object}\n     * @property {object[]} documents - the list of inserted document objects\n     */\n    emit(this, 'insert', { documents: local })\n    emit(this, 'change', { type: 'insert' })\n    return primaries\n  }\n\n  /**\n   * Updates documents by a given query and modifier.\n   * If no middleware exists then the update is applied immediately.\n   * Otherwise, it runs through all functions in the middleware stack\n   * and awaits the updated array as result.\n   *\n   * The updated array must be the same length as the documents selected.\n   * Note: middleware can alter or filter the documents.\n   *\n   * If a middleware throws an error then there will be no update at all.\n   *\n   * @param {object} query\n   * @param {object} [options={}]\n   * @param {boolean} [options.strict=] optional strict mode used to check for equal length queried and updated docs\n   * @param {boolean} [options.strict=false]\n   * @return {Promise<*>}\n   */\n  async update (query, modifier = {}, options = {}) {\n    const local = copy(this.find(query, options))\n    const entries = Object.entries(modifier)\n    let updated = local.map(doc => {\n      const copy = ({ ...doc })\n\n      entries.forEach(([key, value]) => {\n        const val = typeof value === 'function'\n          ? value(copy[key])\n          : value\n        if (val === null) {\n          delete copy[key]\n        } else if (val !== undefined) {\n          copy[key] = val\n        }\n      })\n      return copy\n    })\n\n    if (this.hasUpdate) {\n      const updateOptions = { ...options, ...getOptions(this) }\n      for (const handler of this.handler) {\n        if (handler.update) {\n          updated = await handler.update(local, modifier, updateOptions, updated)\n        }\n      }\n\n      if (options.strict && updated.length !== local.length) {\n        throw new Error(`Update return values expected to be of length (${local.length}), got (${updated.length}) in storage ${this.name}`)\n      }\n    }\n\n    updated.forEach(doc => {\n      const key = doc[this.primary]\n      const wrapped = this.keys.get(key)\n\n      if (!wrapped) {\n        throw new Error(`Doc not found by primary key ${key} in storage ${this.name}`)\n      }\n\n      wrapped.set(doc)\n    })\n\n    emit(this, 'update', { documents: updated })\n    emit(this, 'change', { type: 'update' })\n    return updated.length\n  }\n\n  /**\n   * Removes documents from the storage by given query.\n   * If a middleware with remove implementation does not exist then the change is applied immediately.\n   * @param query {object|string|string[]|function}\n   * @param {object} [options={}]\n   * @param {boolean} [options.strict=] optional strict mode used to check for equal length queried and removed docs\n   * @return {Promise<number>} the number of removed documents\n   */\n  async remove (query, options = {}) {\n    const local = copy(this.find(query, options))\n    let removed = local.map(doc => doc[this.primary])\n\n    if (this.hasRemove) {\n      const removeOptions = { ...options, ...getOptions(this) }\n\n      for (const handler of this.handler) {\n        if (handler.remove) {\n          removed = await handler.remove(local, removeOptions, removed)\n        }\n      }\n      if (options.strict && removed.length !== local.length) {\n        throw new Error(`Remove return values expected to be of length (${local.length}), got (${removed.length}) in storage ${this.name}`)\n      }\n    }\n\n    removed.forEach(key => {\n      const original = this.keys.get(key)\n\n      if (!original) {\n        throw new Error(`Doc not found by primary key ${key} in storage ${this.name}`)\n      }\n\n      this.documents.delete(original)\n      this.keys.delete(key)\n    })\n\n    emit(this, 'remove', { documents: removed })\n    emit(this, 'change', { type: 'remove' })\n    return removed.length\n  }\n\n  /**\n   * Select documents from the set by a given selector pattern (query).\n   * @param {object|object[]|string|string[]|function|undefined} query\n   * @param {object} [options={}]\n   * @param {boolean} [options.loose=] use to check loosely (==) instead of strict (===)\n   * @param {number} [options.limit=] limits the amount of documents to add to the result\n   * @returns {object[]}\n   */\n  find (query, options = {}) {\n    const { limit, loose } = options\n    const docs = this.documents\n\n    if (typeof query === 'undefined' || query === null) {\n      return filterDocs({ docs, limit, query: () => true })\n    }\n\n    const isArray = Array.isArray(query)\n    const queryType = typeof query\n\n    if (queryType === 'string') {\n      // string query is expected to be a primary key\n      const doc = this.keys.get(query)\n      return doc ? [doc.get()] : []\n    }\n\n    if (queryType === 'function') {\n      return filterDocs({ docs, limit, query })\n    }\n\n    if (queryType === 'object' && !isArray) {\n      const entries = Object.entries(query)\n      if (entries.length === 0) {\n        return filterDocs({ docs, limit, query: () => true })\n      }\n\n      const byMatcher = doc => entries.every(([key, value]) =>\n        toArray(value)\n          .some(val => loose\n            ? doc[key] == val // eslint-disable-line\n            : doc[key] === val))\n      return filterDocs({ docs, limit, query: byMatcher })\n    }\n\n    if (isArray) {\n      const subs = new Set()\n      const add = doc => limit > 0 && subs.size >= limit ? undefined : subs.add(doc)\n      for (const q of query) {\n        // beware this is a recursion, we hope you know what you are doing\n        this.find(q, { loose }).forEach(add)\n      }\n      return [...subs]\n    }\n\n    throw new Error(`Unsupported query type \"${queryType}\"`)\n  }\n}\n\n/***********\n * private *\n ***********/\n\n/**\n * Creates shallow copies of a list of given docs\n * @private\n * @param docs\n * @return {*}\n */\nconst copy = docs => docs.map(doc => ({ ...doc }))\n\n/**\n * Emitter function; extracted, so it can't be invoked from external.\n * @private\n * @param self\n * @param name\n * @param options\n * @return {*|number}\n */\nconst emit = (self, name, options) => {\n  const hooks = self.hooks.get(name)\n  return hooks && setTimeout(() => hooks.forEach(hook => hook(options)), 0)\n}\n/**\n * Extracts relevant properties to create options object\n * @private\n * @param primary\n * @param name\n * @return {{name, primary}}\n */\nconst getOptions = ({ primary, name }) => ({ primary, name })\n\n/**\n * Applies query to each document and adds the document to the list,\n * if conditions apply and (optional) limit is not reached.\n * @private\n * @param docs\n * @param query\n * @param limit\n * @return {object[]}\n */\nconst filterDocs = ({ docs, query, limit }) => {\n  const filtered = []\n\n  for (const wrapped of docs) {\n    const doc = wrapped.get()\n\n    if (query(doc)) {\n      filtered.push(doc)\n    }\n\n    if (limit > 0 && filtered.length >= limit) {\n      return filtered\n    }\n  }\n\n  return filtered\n}\n/**\n * Transform any incoming argument to an array.\n * @private\n * @param x {*}\n * @return {Array.<*>}\n */\nconst toArray = x => typeof x === 'undefined' ? [] : Array.isArray(x) ? x : [x]\nconst incrementKey = ((count) =>\n  (length = 16) => (++count).toString(10).padStart(length, '0'))(0)\n"],"names":["Document","target","_classCallCheck","set","_createClass","key","value","get","refs","_typeof","TypeError","concat","WeakMap","createDocument","doc","ThinStorage","_this","options","arguments","length","undefined","documents","Set","keys","Map","hooks","name","primary","idGen","incrementKey","handler","toArray","forEach","h","hasInsert","insert","hasUpdate","update","hasRemove","remove","hasFetch","fetch","on","fn","_this$hooks$get","_this2","add","clear","_toConsumableArray","emit","type","_fetch","_asyncToGenerator","_regeneratorRuntime","mark","_callee","query","_this3","fetched","fetchOptions","_iterator","_step","wrap","_callee$","_context","prev","next","abrupt","_objectSpread","getOptions","_createForOfIteratorHelper","s","n","done","sent","t0","e","f","finish","i","Error","has","original","wrapped","stop","_x","_x2","apply","_insert","_callee2","_this4","local","primaries","_iterator2","_step2","_args2","_callee2$","_context2","copy","index","_update","_callee3","_this5","modifier","entries","updated","updateOptions","_iterator3","_step3","_args3","_callee3$","_context3","find","Object","map","_ref","_ref2","_slicedToArray","val","strict","_x3","_remove","_callee4","_this6","removed","removeOptions","_iterator4","_step4","_args4","_callee4$","_context4","_x4","limit","loose","docs","filterDocs","isArray","Array","queryType","byMatcher","every","_ref3","_ref4","some","subs","size","_iterator5","_step5","q","err","self","setTimeout","hook","_ref5","_ref6","filtered","_iterator6","_step6","push","x","count","toString","padStart"],"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"}